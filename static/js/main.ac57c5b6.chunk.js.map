{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","onChange","type","App","handleChange","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,6BAAMJ,EAAMG,QAAQE,OACpB,4BAAKL,EAAMG,QAAQG,YCFdC,G,MAAW,SAAAP,GACpB,OACI,qBAAKC,UAAU,YAAf,SACMD,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNtBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,SAAhB,OACrB,uBACIX,UAAU,SACVY,KAAK,SACLF,YAAcA,EACdC,SAAUA,MCkDHE,E,kDAlDb,aAAe,IAAD,8BACZ,gBA4BFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SA3BtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDAgBd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAc7C,WAAU,IAAD,EAE2BC,KAAKN,MAA/Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEpG,OACE,sBAAK7B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEU,YAAY,oBACZC,SAAUe,KAAKZ,eACjB,cAAC,EAAD,CAAUP,SAAWoB,W,GA7CXI,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ac57c5b6.chunk.js","sourcesContent":["import './card.style.css'\n\nexport const Card = (props) => (\n    <div className=\"card-container\">\n        <img src={`https://robohash.org/${props.monster.id}?size=180x180&set=set2`} />\n        <h1>{ props.monster.name }</h1>\n        <p>{ props.monster.email }</p>\n    </div>\n)","import { Card } from '../card/card.component'\n\nimport './card-list.style.css'\n\nexport const CardList = props => {\n    return (\n        <div className=\"card-list\">\n            { props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster} />\n            )) }\n        </div>\n    )\n}","import './search-box.style.css'\n\nexport const SearchBox = ({ placeholder, onChange }) => (\n    <input\n        className=\"search\"\n        type=\"search\" \n        placeholder={ placeholder } \n        onChange={onChange} />\n)","import React from 'react';\nimport './App.css';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n\n    // binding class method\n    // For a given function, creates a bound function that has the same body\n    // as the original function. The this object of the bound function is associated \n    // with the specified object, and has the specified initial parameters.\n    // this.handleChange = this.handleChange.bind(this)\n  }\n\n  // life cycle methods: methods that get called in different stages when components get rendered\n  componentDidMount() { // when components get rendered for the first time\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n\n  // Class Methods\n  // handleChange(e) {\n  //   this.setState({ searchField: e.target.value});\n  // }\n\n  // Arrow Function\n  // Don't have to binding the method, it's automatically scoped into windows object.\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n  \n  render() {\n    \n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox \n          placeholder=\"Search monster...\" \n          onChange={this.handleChange} />\n        <CardList monsters={ filteredMonsters } />\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}